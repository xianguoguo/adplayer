package com.adshow.player.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.adshow.player.bean.Advertising;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISING".
*/
public class AdvertisingDao extends AbstractDao<Advertising, String> {

    public static final String TABLENAME = "ADVERTISING";

    /**
     * Properties of entity Advertising.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property DownloadTime = new Property(4, java.util.Date.class, "downloadTime", false, "DOWNLOAD_TIME");
        public final static Property ValidateTime = new Property(5, java.util.Date.class, "validateTime", false, "VALIDATE_TIME");
        public final static Property UnzipTime = new Property(6, java.util.Date.class, "unzipTime", false, "UNZIP_TIME");
    }

    private DaoSession daoSession;


    public AdvertisingDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertisingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISING\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"URL\" TEXT," + // 3: url
                "\"DOWNLOAD_TIME\" INTEGER," + // 4: downloadTime
                "\"VALIDATE_TIME\" INTEGER," + // 5: validateTime
                "\"UNZIP_TIME\" INTEGER);"); // 6: unzipTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Advertising entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(5, downloadTime.getTime());
        }
 
        java.util.Date validateTime = entity.getValidateTime();
        if (validateTime != null) {
            stmt.bindLong(6, validateTime.getTime());
        }
 
        java.util.Date unzipTime = entity.getUnzipTime();
        if (unzipTime != null) {
            stmt.bindLong(7, unzipTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Advertising entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(5, downloadTime.getTime());
        }
 
        java.util.Date validateTime = entity.getValidateTime();
        if (validateTime != null) {
            stmt.bindLong(6, validateTime.getTime());
        }
 
        java.util.Date unzipTime = entity.getUnzipTime();
        if (unzipTime != null) {
            stmt.bindLong(7, unzipTime.getTime());
        }
    }

    @Override
    protected final void attachEntity(Advertising entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Advertising readEntity(Cursor cursor, int offset) {
        Advertising entity = new Advertising( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // downloadTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // validateTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // unzipTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Advertising entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownloadTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setValidateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUnzipTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Advertising entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Advertising entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Advertising entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
