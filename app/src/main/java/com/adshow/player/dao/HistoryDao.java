package com.adshow.player.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.adshow.player.bean.History;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY".
*/
public class HistoryDao extends AbstractDao<History, String> {

    public static final String TABLENAME = "HISTORY";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property PlayBeginTime = new Property(1, java.util.Date.class, "playBeginTime", false, "PLAY_BEGIN_TIME");
        public final static Property PlayEndTime = new Property(2, java.util.Date.class, "playEndTime", false, "PLAY_END_TIME");
        public final static Property AdvertisingId = new Property(3, String.class, "advertisingId", false, "ADVERTISING_ID");
    }

    private Query<History> advertising_HistoriesQuery;

    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PLAY_BEGIN_TIME\" INTEGER," + // 1: playBeginTime
                "\"PLAY_END_TIME\" INTEGER," + // 2: playEndTime
                "\"ADVERTISING_ID\" TEXT NOT NULL );"); // 3: advertisingId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, History entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date playBeginTime = entity.getPlayBeginTime();
        if (playBeginTime != null) {
            stmt.bindLong(2, playBeginTime.getTime());
        }
 
        java.util.Date playEndTime = entity.getPlayEndTime();
        if (playEndTime != null) {
            stmt.bindLong(3, playEndTime.getTime());
        }
        stmt.bindString(4, entity.getAdvertisingId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, History entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date playBeginTime = entity.getPlayBeginTime();
        if (playBeginTime != null) {
            stmt.bindLong(2, playBeginTime.getTime());
        }
 
        java.util.Date playEndTime = entity.getPlayEndTime();
        if (playEndTime != null) {
            stmt.bindLong(3, playEndTime.getTime());
        }
        stmt.bindString(4, entity.getAdvertisingId());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // playBeginTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // playEndTime
            cursor.getString(offset + 3) // advertisingId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlayBeginTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setPlayEndTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAdvertisingId(cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(History entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(History entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(History entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "histories" to-many relationship of Advertising. */
    public List<History> _queryAdvertising_Histories(String advertisingId) {
        synchronized (this) {
            if (advertising_HistoriesQuery == null) {
                QueryBuilder<History> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AdvertisingId.eq(null));
                advertising_HistoriesQuery = queryBuilder.build();
            }
        }
        Query<History> query = advertising_HistoriesQuery.forCurrentThread();
        query.setParameter(0, advertisingId);
        return query.list();
    }

}
